const Application = require("../models/Application");
const User = require("../models/User");
const Job = require("../models/Job");
const nodemailer = require("nodemailer");
const dotenv = require("dotenv");
dotenv.config();

// ðŸ”¹ Admin adds a test application (simulate user applying)
const adminApplyJob = async (req, res) => {
  try {
    const { jobId, userId } = req.body;

    // Check if job exists
    const job = await Job.findById(jobId);
    if (!job) {
      return res.status(404).json({ success: false, message: "Job not found" });
    }

    // Check if user exists
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ success: false, message: "User not found" });
    }

    // Prevent duplicate application
    const existingApplication = await Application.findOne({ job: jobId, applicant: userId });
    if (existingApplication) {
      return res.status(400).json({ success: false, message: "Application already exists" });
    }

    const application = await Application.create({
      job: jobId,
      applicant: userId,
    });

    res.status(201).json({ success: true, message: "Application created", application });
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: "Server error" });
  }
};

// ðŸ”¹ Get ALL applications (admin only)
// ðŸ”¹ Get ALL applications with Pagination + Filters (Admin)
const getAllApplications = async (req, res) => {
  try {
    const {
      page = 1,
      limit = 10,
      job,
      user,
      startDate,
      endDate,
      sort = "desc"
    } = req.query;

    const query = {};

    // Apply filters
    if (job) query.job = job;
    if (user) query.applicant = user;
    if (startDate && endDate) {
      query.appliedAt = {
        $gte: new Date(startDate),
        $lte: new Date(endDate)
      };
    }

    // Pagination
    const skip = (page - 1) * limit;

    // Fetch applications
    const applications = await Application.find(query)
      .populate("applicant", "name email phone location resume")
      .populate("job", "title location")
      .sort({ appliedAt: sort === "asc" ? 1 : -1 })
      .skip(skip)
      .limit(Number(limit));

    const totalApplications = await Application.countDocuments(query);

    res.status(200).json({
      success: true,
      totalApplications,
      page: Number(page),
      totalPages: Math.ceil(totalApplications / limit),
      applications,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: "Server error" });
  }
};



// ðŸ”¹ Get all applications for a specific job
const getApplicationsByJob = async (req, res) => {
  try {
    const { jobId } = req.params;

    // Check if job exists
    const job = await Job.findById(jobId);
    if (!job) {
      return res.status(404).json({ success: false, message: "Job not found" });
    }

    // Get applications and populate applicant info
    const applications = await Application.find({ job: jobId }).populate(
      "applicant",
      "name email profile resume"
    );

    res.status(200).json({ success: true, applications });
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: "Server error" });
  }
};

// ðŸ”¹ Update application status
const updateApplicationStatus = async (req, res) => {
  try {
    const { appId } = req.params;
    const { status } = req.body; // expected: "shortlisted", "accepted", "rejected"

    // Validate status
    const validStatuses = ["applied", "shortlisted", "accepted", "rejected"];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ success: false, message: "Invalid status" });
    }

    const application = await Application.findById(appId);
    if (!application) {
      return res.status(404).json({ success: false, message: "Application not found" });
    }

    application.status = status;
    await application.save();

    res.status(200).json({ success: true, message: `Application ${status}` });
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: "Server error" });
  }
};

const notifyApplicant = async (req, res) => {
Â  try {
Â  Â  const { appId } = req.params;

Â  Â  const application = await Application.findById(appId)
Â  Â  Â  .populate("applicant", "name email")
Â  Â  Â  .populate("job", "title location");

Â  Â  if (!application) {
Â  Â  Â  return res
Â  Â  Â  Â  .status(404)
Â  Â  Â  Â  .json({ success: false, message: "Application not found" });
Â  Â  }

Â  Â  // âœ… Updated Nodemailer transporter to use Resend
Â  Â  const transporter = nodemailer.createTransport({
Â  Â  Â  host: "smtp.resend.com", // Resend SMTP host
Â  Â  Â  secure: true, // Use SSL
Â  Â  Â  port: 465, // Standard port for SSL
Â  Â  Â  auth: {
Â  Â  Â  Â  user: "resend", // This is always "resend" for SMTP connections
Â  Â  Â  Â  pass: process.env.RESEND_API_KEY, // Your Resend API key
Â  Â  Â  },
Â  Â  });

Â  Â  // âœ… Professional HTML email template
Â  Â  const htmlBody = `
Â  Â  <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; border: 1px solid #e0e0e0; border-radius: 8px; padding: 20px;">
Â  Â  Â  <h2 style="color: #2c3e50; text-align: center;">ðŸ“¢ Application Status Update</h2>
Â  Â  Â  
Â  Â  Â  <p style="font-size: 16px; color: #333;">Hi <b>${application.applicant.name}</b>,</p>
Â  Â  Â  <p style="font-size: 15px; color: #333;">
Â  Â  Â  Â  Your application for the role of <strong>${application.job.title}</strong>${
Â  Â  Â  Â  Â  application.job.location ? ` in <strong>${application.job.location}</strong>` : ""
Â  Â  Â  Â  } has been updated.
Â  Â  Â  </p>

Â  Â  Â  <div style="background: #f4f6f9; padding: 15px; border-radius: 6px; margin: 20px 0; text-align:center;">
Â  Â  Â  Â  <p style="font-size: 15px; margin: 0; color: #444;">
Â  Â  Â  Â  Â  ðŸ“Œ <strong>Status:</strong> <span style="color:#FF5722;">${application.status.toUpperCase()}</span>
Â  Â  Â  Â  </p>
Â  Â  Â  </div>

Â  Â  Â  <p style="font-size: 15px; color: #333;">
Â  Â  Â  Â  Thank you for applying with us. Please stay tuned for further updates from our team or the employer.
Â  Â  Â  </p>

Â  Â  Â  <div style="text-align: center; margin: 25px 0;">
Â  Â  Â  Â  <a href="https://fiitjobs.com/applications" 
Â  Â  Â  Â  Â  Â style="background: #28a745; color: white; font-size: 16px; font-weight: bold; text-decoration: none; padding: 12px 24px; border-radius: 6px; display: inline-block;">
Â  Â  Â  Â  Â  View My Applications ðŸ“‚
Â  Â  Â  Â  </a>
Â  Â  Â  </div>

Â  Â  Â  <hr style="margin: 25px 0;" />
Â  Â  Â  <p style="font-size: 13px; color: #777; text-align: center;">
Â  Â  Â  Â  Need assistance? Reach out to us at 
Â  Â  Â  Â  <a href="mailto:support@fiitjobs.com">support@fiitjobs.com</a>
Â  Â  Â  </p>
Â  Â  Â  <p style="text-align: center; font-size: 12px; color: #aaa;">
Â  Â  Â  Â  Â© ${new Date().getFullYear()} FIIT JOBS. All rights reserved.
Â  Â  Â  </p>
Â  Â  </div>
Â  Â  `;

Â  Â  const mailOptions = {
Â  Â  Â  from: `"FIIT JOBS" <${process.env.RESEND_FROM_EMAIL}>`, // The 'from' email must be a verified domain in Resend
Â  Â  Â  to: application.applicant.email,
Â  Â  Â  subject: `ðŸ“¢ Application Status Update - ${application.job.title}`,
Â  Â  Â  html: htmlBody,
Â  Â  };

Â  Â  // Send email
Â  Â  await transporter.sendMail(mailOptions);

Â  Â  // Mark as notified
Â  Â  application.notified = true;
Â  Â  await application.save();

Â  Â  res.status(200).json({
Â  Â  Â  success: true,
Â  Â  Â  message: `Notification email sent to ${application.applicant.email}`,
Â  Â  });
Â  } catch (error) {
Â  Â  console.error(error);
Â  Â  res.status(500).json({ success: false, message: "Server error" });
Â  }
};

module.exports = {
Â  adminApplyJob,
Â  getApplicationsByJob,
Â  getAllApplications,
Â  updateApplicationStatus,
Â  notifyApplicant,
};